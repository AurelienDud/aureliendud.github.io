{"version":3,"sources":["webpack://aureliendud-website/./src/services/formaters.ts","webpack://aureliendud-website/./src/services/tools.ts","webpack://aureliendud-website/./src/partials/blog/comments.tsx","webpack://aureliendud-website/./src/partials/blog/cover.tsx","webpack://aureliendud-website/./src/templates/template-blog.tsx"],"names":["formatPost","data","title","frontmatter","undefined","date","category","cover","childImageSharp","gatsbyImageData","coverCopy","excerpt","link","fields","slug","body","words","wordCount","timeToReadMessage","time","Math","round","timeToRead","prettifyExcerpt","replace","comments","useRef","useState","isReady","setIsReady","useEffect","current","scriptTag","document","createElement","async","src","setAttribute","appendChild","className","ref","coverStyle","css","coverImgStyles","coverImage","copyright","coverEl","parallax","scroll","mov","elBound","handleScroll","event","preventDefault","window","scrollY","height","max","opacity","sign","style","transform","toString","getBoundingClientRect","addEventListener","removeEventListener","overflow","cx","G","image","alt","model","mdx","wordsCount","getImage","meta","type","MDXProvider","components","mdxComponents","MDXRenderer"],"mappings":"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","file":"component---src-templates-template-blog-tsx-48bec744d13699234ba5.js","sourcesContent":["/**\r\n * Format data from graphQL into a friendly flat object\r\n * @param {object} data from graphQL\r\n */\r\nexport const formatPost = ( data:INode ):IPost => ({\r\n  title: data?.frontmatter?.title || undefined,\r\n  date: data?.frontmatter?.date || undefined,\r\n  category: data?.frontmatter?.category || undefined,\r\n  cover: data?.frontmatter?.cover?.childImageSharp?.gatsbyImageData || undefined,\r\n  coverCopy: data?.frontmatter?.coverCopy || undefined,\r\n  excerpt: data?.excerpt || undefined,\r\n  link: data?.fields?.slug || undefined,\r\n  body: data?.body || undefined,\r\n  words: data?.wordCount?.words || undefined\r\n})\r\n\r\n","/**\r\n * Time to read a text\r\n * @description 230 words is an average count \r\n */\r\nexport function timeToRead (words:number) {\r\n  return Math.round(words / 200)\r\n}\r\n\r\n/**\r\n * Time to read a text\r\n * Rectify to display an user-friendly result\r\n */\r\nexport function timeToReadMessage (words:number) {\r\n  let time = timeToRead(words)\r\n  return `~ ${time + 1} ${time < 1 ? \"minute\" : \"minutes\"}`\r\n}\r\n\r\n/**\r\n * @description\r\n * Trim until the last point is it exists\r\n * Else the full excerpt if it exists\r\n * Else an empty string\r\n */\r\nexport const prettifyExcerpt = (excerpt?:string):string => !excerpt ? '' : excerpt.replace(/(?!.*\\.)\\n+.*/gm, '') || excerpt ","import React, { FunctionComponent, useState, useRef, useEffect } from 'react'\r\n\r\n/**\r\n * Settings\r\n */\r\nconst pluginApi = 'https://utteranc.es/client.js'\r\nconst websiteRepo = 'AurelienDud/AurelienDud.github.io'\r\nconst githubLabel = 'comments'\r\nconst githubTitle = 'pathname'\r\nconst commentsTheme = 'boxy-light'\r\n\r\n/**\r\n * Override Utterances styles\r\n * this is ugly but the plugin seems not provide a way to customize its container styles\r\n * and set an arbitrary max-width\r\n */\r\nconst forceStyles = `\r\n  .utterances {\r\n    max-width: 100% !important;\r\n  }\r\n`\r\n\r\n/**\r\n * Comments component\r\n */\r\nconst Comments:FunctionComponent = () => {\r\n  const comments = useRef<HTMLDivElement>(null)\r\n  const [isReady, setIsReady] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (comments?.current && !isReady) {\r\n      const scriptTag = document.createElement('script')\r\n      scriptTag.async = true\r\n      scriptTag.src = pluginApi\r\n      scriptTag.setAttribute('repo', websiteRepo)\r\n      scriptTag.setAttribute('issue-term', githubTitle)\r\n      scriptTag.setAttribute('theme', commentsTheme)\r\n      scriptTag.setAttribute('label', githubLabel)\r\n      scriptTag.setAttribute('async', 'true')\r\n      scriptTag.setAttribute('crossorigin', 'anonymous')\r\n      scriptTag.setAttribute('reverse-order', 'true')\r\n      scriptTag.setAttribute('input-position-top', 'true')\r\n\r\n      comments.current.appendChild(scriptTag)\r\n      setIsReady(true)\r\n    }\r\n  }, [comments])\r\n\r\n  return (\r\n    <>\r\n      <style>{forceStyles}</style>\r\n      <div className='w-100' ref={comments} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Comments\r\n","import React, { FunctionComponent, useRef, useEffect } from \"react\"\r\nimport { css, cx } from '@emotion/css'\r\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\"\r\n\r\n/**\r\n * Type\r\n */\r\ninterface IBlogCover {\r\n  coverImage: IGatsbyImageData,\r\n  copyright?: string\r\n}\r\n\r\ninterface IParallax {\r\n  scroll: number,\r\n  mov: number,\r\n  elBound: DOMRect|null,\r\n}\r\n\r\n/**\r\n * Settings\r\n */\r\nconst parallaxStrength:number = 1.25\r\n\r\n\r\n/**\r\n * Styles\r\n */\r\nconst coverStyle = css`\r\n  position: relative;\r\n  overflow: hidden;\r\n  box-shadow: 0px -40px 40px -40px inset #00000030;\r\n  &:after {\r\n    content: \"\";\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    border-top: solid 2vw transparent;\r\n    border-bottom: solid 2vw white;\r\n    border-left: solid 50vw white;\r\n    border-right: solid 50vw white;\r\n  }\r\n`\r\n\r\nconst coverImgStyles = css`\r\n  position: relative;\r\n  border-radius: 5px;\r\n  border-top: solid 6px white;\r\n  border-right: solid 6px white;\r\n  border-left: solid 6px white;\r\n  transform-origin: center;\r\n  transform: translate3d(0, 0, 0);\r\n  -webkit-transform-style: preserve-3d;\r\n  -webkit-backface-visibility: hidden;\r\n  transition: all 0s 0s;\r\n  background-color: #ffffff30;\r\n  opacity: 1;\r\n  transition: opacity linear 0.4s;\r\n  box-shadow: rgb(0 0 0 / 33%) 0px -45px 20px -20px inset;\r\n`\r\n\r\n/**\r\n * View\r\n */\r\nconst BlogCover:FunctionComponent<IBlogCover> = ({ coverImage, copyright }) => {\r\n  // set a ref on the cover container to create the visual effect\r\n  const coverEl = useRef<HTMLDivElement>(null)\r\n\r\n  // set a ref to manage the parallax effect\r\n  const parallax = useRef<IParallax>({\r\n    scroll: 0,\r\n    mov: 0,\r\n    elBound: null,\r\n  })\r\n\r\n  // handle event\r\n  const handleScroll = (event:Event) => {\r\n    event.preventDefault()\r\n\r\n    if ( \r\n      !coverImage \r\n      || !coverEl.current \r\n      || !parallax.current.elBound\r\n      || window.scrollY > parallax.current.elBound.height\r\n    ) return\r\n    \r\n    // get scroll\r\n    const scroll = Math.max(0, Math.round(window.scrollY * parallaxStrength))\r\n\r\n    // get scroll distance \r\n    const mov = Math.round(scroll - parallax.current.scroll)\r\n\r\n    // calcul opacity\r\n    const opacity = 1 - (1 / parallax.current.elBound.height) * scroll * parallaxStrength\r\n\r\n    // apply conditional style\r\n    if ( \r\n      Math.sign(mov) === Math.sign(parallax.current.mov) \r\n      || parallax.current.scroll === 0 \r\n    ){\r\n      coverEl.current.style.transform = `translate3d(0, ${scroll}px, 0)`\r\n      coverEl.current.style.opacity = opacity.toString()\r\n    }\r\n\r\n    // apply new values\r\n    parallax.current.scroll = scroll\r\n    parallax.current.mov = mov\r\n  }\r\n\r\n  // init parallax\r\n  useEffect(() => {\r\n    if ( parallax.current.elBound || !coverEl.current ) return  \r\n    \r\n    parallax.current.elBound = coverEl.current.getBoundingClientRect()\r\n  }, [coverEl])\r\n\r\n  // manage parallax effect\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", handleScroll)\r\n    \r\n    return () => window.removeEventListener(\"scroll\", handleScroll)\r\n  }, [])\r\n\r\n  return (\r\n    <div style={{ overflow: \"hidden\" }}>\r\n      <div className={cx(coverStyle, \"bg-primary\")}>\r\n        <div className=\"container-reading\">\r\n          <div className={coverImgStyles} ref={coverEl}>\r\n            <GatsbyImage image={coverImage} title={`Source de l'image: ${copyright || 'inconnue'}`} alt='' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default BlogCover\r\n\r\n","import React, { FunctionComponent } from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport { getImage } from \"gatsby-plugin-image\"\r\nimport { MDXProvider } from \"@mdx-js/react\"\r\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\r\nimport mdxComponents from \"services/mdxConvertor\"\r\nimport { formatPost } from \"services/formaters\"\r\nimport { timeToReadMessage } from \"services/tools\"\r\nimport Layout from \"partials/layouts/layout-page\"\r\nimport Comments from \"partials/blog/comments\"\r\nimport Cover from \"partials/blog/cover\"\r\n\r\n/**\r\n * Types\r\n */\r\ninterface IBlogTemplate {\r\n  data: IMdxData\r\n}\r\n\r\n/**\r\n * QUery\r\n */\r\nexport const pageQuery = graphql`\r\n  query($slug: String!) {\r\n    mdx(fields: { slug: { eq: $slug } }) {\r\n      id\r\n      body\r\n      wordCount {\r\n        words\r\n      }\r\n      frontmatter {\r\n        title\r\n        category\r\n        date\r\n        coverCopy,\r\n        cover {\r\n          childImageSharp {\r\n            gatsbyImageData(layout: FULL_WIDTH)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n\r\n/**\r\n * View\r\n */\r\nconst BlogTemplate:FunctionComponent<IBlogTemplate> = ({ data }) => {\r\n  // format mdx data\r\n  const model = formatPost(data.mdx)\r\n  const wordsCount = data.mdx.wordCount.words || 100\r\n\r\n  // cover image\r\n  const coverImage = model.cover && getImage(model.cover)\r\n\r\n  // metadata\r\n  const meta:Partial<ISEO> = {\r\n    type: \"article\",\r\n    category: model.category,\r\n  }\r\n\r\n  return (\r\n    <Layout meta={meta}>\r\n      {/* cover */}\r\n      {coverImage && (\r\n        <Cover coverImage={coverImage} copyright={model.coverCopy} />\r\n      )}\r\n\r\n      {/* content */}\r\n      <div className=\"container mt-2 mb-2\">\r\n        {/* title */}\r\n        {model.title && (\r\n          <h1 className=\"h1 h-reading mb-2 mb-sm-3 text-center\">\r\n            {model.title}\r\n          </h1>\r\n        )}\r\n\r\n        {/* date & duration */}\r\n        <div className=\"container-reading\">\r\n          {(model.date || model.words) && (\r\n            <div className=\"py-1 my-2 my-sm-4 border-top border-bottom text-muted small\">\r\n              <div className=\"row no-gutters\">\r\n                {model.date && (\r\n                  <div className=\"col-12 col-sm px-1 text-center text-sm-left\">\r\n                    publié le {model.date}\r\n                  </div>\r\n                )}\r\n                {model.words && (\r\n                  <div className=\"col-12 col-sm px-1 text-center text-sm-right\">\r\n                    {timeToReadMessage(wordsCount)}\r\n                  </div>\r\n                )} \r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* body */}\r\n          {model.body && (\r\n            <MDXProvider components={mdxComponents}>\r\n              <MDXRenderer>{model.body}</MDXRenderer>\r\n            </MDXProvider>\r\n          )}\r\n\r\n          {/* comments */}\r\n          <div className=\"mt-4 p-1 border rounded shadow-sm\">\r\n            <Comments />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\n\r\nexport default BlogTemplate"],"sourceRoot":""}