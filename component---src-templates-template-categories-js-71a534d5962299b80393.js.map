{"version":3,"sources":["webpack://aureliendud-website/./src/components/atoms/articlePreview.js","webpack://aureliendud-website/./src/components/partials/postsList.js","webpack://aureliendud-website/./src/services/formaters.js","webpack://aureliendud-website/./src/templates/template-categories.js"],"names":["ArticlePreview","title","cover","excerpt","link","skeletonMode","CardCover","CardCoverAttrs","className","alt","S","src","G","image","getImage","CardTitle","width","height","duration","CardText","count","CardLink","href","defaultProps","posts","minPostCount","map","post","index","key","formatBlogData","length","data","frontmatter","date","category","childImageSharp","fields","slug","body","words","wordCount","Template","pageContext","allMdx","nodes","pageTitle"],"mappings":"s+BAcA,SAASA,EAAT,GAAwE,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,aAE/CC,EAAY,WAChB,IAAMC,EAAiB,CACrBC,UAAW,wCACXC,IAAK,IAEP,OAAIJ,EAEA,gBAAC,EAAAK,EAAD,eACEC,IAAI,wCACAJ,EAFN,wBAKCL,EAIE,gBAAC,EAAAU,EAAD,eAAaC,OAAOC,OAASZ,IAAYK,IAF5C,gBAAC,EAAAG,EAAD,eAAaC,IAAI,gCAAmCJ,EAApD,2eAMAQ,EAAY,WAChB,OAAKd,GAAUI,EAEb,sBAAIG,UAAU,kCACXH,EACC,gBAAC,KAAD,CAAUW,MAAM,MAAMC,OAAO,MAAMC,SAjCpB,IAmCfjB,GAN8B,kCAahCkB,EAAW,WACf,OAAKhB,GAAYE,EAEf,uBAAKG,UAAU,wBACZH,EACC,gBAAC,KAAD,CAAUe,MAAO,EAAGF,SA/CL,IAiDff,GANgC,kCAalCkB,EAAW,WACf,OAAKjB,GAASC,EAEZ,qBAAGiB,KAAMlB,EAAMI,UAAU,kBACvB,wBAAMA,UAAU,WAAhB,mBAH+B,kCAWrC,OACE,uBAAKA,UAAU,cACb,gBAACF,EAAD,MACA,uBAAKE,UAAU,aACb,gBAACO,EAAD,MACA,gBAACI,EAAD,OAEA,gBAACE,EAAD,OAcRrB,EAAeuB,aAAe,CAC5BrB,MAAO,KACPD,MAAO,KACPE,QAAS,KACTC,KAAM,KACNC,cAAc,GAGhB,Q,UC3EA,MA1BA,YAAiD,IAA5BmB,EAA2B,EAA3BA,MAA2B,IAApBC,oBAAoB,MAAL,EAAK,EAC9C,OACE,uBAAKjB,UAAU,OACZgB,EAAME,KAAI,SAACC,EAAMC,GAAP,OACT,uBAAKpB,UAAU,gCAAgCqB,IAAKD,GAClD,gBAAC,GAAmBE,OAAeH,QAOtCH,EAAMO,OAAS,GAAKN,GACnB,uBAAKjB,UAAU,mDACb,gBAAC,EAAD,CAAgBH,cAAY,KAG/BmB,EAAMO,OAAS,GAAKN,GACnB,uBAAKjB,UAAU,mDACb,gBAAC,EAAD,CAAgBH,cAAY,Q,kCCnB/B,SAASyB,EAAeE,GAAO,IAAD,cACnC,MAAO,CACL/B,OAAO+B,SAAA,UAAAA,EAAMC,mBAAN,eAAmBhC,QAAS,KACnCiC,MAAMF,SAAA,UAAAA,EAAMC,mBAAN,eAAmBC,OAAQ,KACjCC,UAAUH,SAAA,UAAAA,EAAMC,mBAAN,eAAmBE,WAAY,KACzCjC,OAAO8B,SAAA,UAAAA,EAAMC,mBAAN,mBAAmB/B,aAAnB,eAA0BkC,kBAAmB,KACpDjC,SAAS6B,aAAA,EAAAA,EAAM7B,UAAW,KAC1BC,MAAM4B,SAAA,UAAAA,EAAMK,cAAN,eAAcC,OAAQ,KAC5BC,MAAMP,aAAA,EAAAA,EAAMO,OAAQ,KACpBC,OAAOR,SAAA,UAAAA,EAAMS,iBAAN,eAAiBD,QAAS,M,iJC6BtB,SAASE,EAAT,GAA0C,IAAD,EAArBV,EAAqB,EAArBA,KAAMW,EAAe,EAAfA,YAEjCnB,GAAQQ,SAAA,UAAAA,EAAMY,cAAN,eAAcC,QAAS,KAE/BC,GAAYH,aAAA,EAAAA,EAAaR,WAAY,KAE3C,OACE,gBAAC,IAAD,KACE,uBAAK3B,UAAU,4BACZsC,GACC,sBAAItC,UAAU,sBAAd,eACesC,GAGhBtB,EAAMO,OAAS,GACd,gBAAC,IAAD,CAAWP,MAAOA","file":"component---src-templates-template-categories-js-71a534d5962299b80393.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StaticImage, GatsbyImage, getImage } from \"gatsby-plugin-image\";\nimport Skeleton from \"react-loading-skeleton\";\n\n/**\n * Settings\n */\nconst skeletonDuration = 5;\n\n/**\n * View\n * @param {object} props\n */\nfunction ArticlePreview({ title, cover, excerpt, link, skeletonMode }) {\n  // card image\n  const CardCover = () => {\n    const CardCoverAttrs = {\n      className: \"card-img-top image-cover ratio-cinema\",\n      alt: \"\",\n    };\n    if (skeletonMode)\n      return (\n        <StaticImage\n          src=\"../../assets/images/default_soon.png\"\n          {...CardCoverAttrs}\n        />\n      );\n    if (!cover)\n      return (\n        <StaticImage src=\"../assets/images/default.png\" {...CardCoverAttrs} />\n      );\n    return <GatsbyImage image={getImage(cover)} {...CardCoverAttrs} />;\n  };\n\n  // card title\n  const CardTitle = () => {\n    if (!title && !skeletonMode) return <></>;\n    return (\n      <h3 className=\"h6 font-weight-bold card-title\">\n        {skeletonMode ? (\n          <Skeleton width=\"8em\" height=\"1em\" duration={skeletonDuration} />\n        ) : (\n          title\n        )}\n      </h3>\n    );\n  };\n\n  // card body\n  const CardText = () => {\n    if (!excerpt && !skeletonMode) return <></>;\n    return (\n      <div className=\"text-small card-text\">\n        {skeletonMode ? (\n          <Skeleton count={4} duration={skeletonDuration} />\n        ) : (\n          excerpt\n        )}\n      </div>\n    );\n  };\n\n  // card link\n  const CardLink = () => {\n    if (!link && !skeletonMode) return <></>;\n    return (\n      <a href={link} className=\"stretched-link\">\n        <span className=\"sr-only\">\n          Lire l'article\n        </span>\n      </a>\n    );\n  };\n\n  // render\n  return (\n    <div className=\"card h-100\">\n      <CardCover />\n      <div className=\"card-body\">\n        <CardTitle />\n        <CardText />\n      </div>\n        <CardLink />\n      \n    </div>\n  );\n}\n\nArticlePreview.propTypes = {\n  cover: PropTypes.object,\n  title: PropTypes.string,\n  excerpt: PropTypes.string,\n  link: PropTypes.string,\n  skeletonMode: PropTypes.bool,\n};\n\nArticlePreview.defaultProps = {\n  cover: null,\n  title: null,\n  excerpt: null,\n  link: null,\n  skeletonMode: false,\n};\n\nexport default ArticlePreview;\n","import React from \"react\";\nimport ArticlePreview from \"components/atoms/articlePreview\";\nimport { formatBlogData } from \"services/formaters\";\n\nfunction PostsList({ posts, minPostCount = 3 }) {\n  return (\n    <div className=\"row\">\n      {posts.map((post, index) => (\n        <div className=\"col-12 col-md-6 col-lg-4 pb-4\" key={index}>\n          <ArticlePreview {...formatBlogData(post)} />\n        </div>\n      ))}\n      {/*\n        display fake content to fill the space and tease future publications\n        but hide when necessary to keep a good UX on mobile\n      */}\n      {posts.length + 1 <= minPostCount && (\n        <div className=\"col-12 col-md-6 col-lg-4 pb-4 d-none d-md-block\">\n          <ArticlePreview skeletonMode />\n        </div>\n      )}\n      {posts.length + 2 <= minPostCount && (\n        <div className=\"col-12 col-md-6 col-lg-4 pb-4 d-none d-lg-block\">\n          <ArticlePreview skeletonMode />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default PostsList;\n","/**\n * Format data from graphQL into a friendly flat object\n * @param {object} data from graphQL\n */\nexport function formatBlogData(data) {\n  return {\n    title: data?.frontmatter?.title || null,\n    date: data?.frontmatter?.date || null,\n    category: data?.frontmatter?.category || null,\n    cover: data?.frontmatter?.cover?.childImageSharp || null,\n    excerpt: data?.excerpt || null,\n    link: data?.fields?.slug || null,\n    body: data?.body || null,\n    words: data?.wordCount?.words || null\n  };\n}\n\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"templates/layout-page\";\nimport PostsList from \"components/partials/postsList\";\n\n/**\n * QUery\n */\nexport const pageQuery = graphql`\n  query categoryPageQuery($category: String!) {\n    allMdx(\n      sort: { fields: [frontmatter___date], order: ASC }\n      filter: {\n        frontmatter: { category: { eq: $category } }\n        fields: { group: { eq: \"blog\" } }\n      }\n    ) {\n      nodes {\n        frontmatter {\n          title\n          date\n          category\n          cover {\n            childImageSharp {\n              gatsbyImageData(layout: FULL_WIDTH)\n            }\n          }\n        }\n        fields {\n          slug\n          group\n        }\n        excerpt(pruneLength: 100)\n      }\n    }\n  }\n`;\n\n/**\n * View\n * @param {object} props\n */\nexport default function Template({ data, pageContext }) {\n  // format mdx data\n  const posts = data?.allMdx?.nodes || null;\n\n  const pageTitle = pageContext?.category || null;\n\n  return (\n    <Layout>\n      <div className=\"container pt-2 mt-4 mb-3\">\n        {pageTitle && (\n          <h1 className=\"mb-4 effect-square\">\n            Cat√©gorie : {pageTitle}\n          </h1>\n        )}\n        {posts.length > 0 && (\n          <PostsList posts={posts} />\n        )}\n      </div>\n    </Layout>\n  );\n}\n"],"sourceRoot":""}