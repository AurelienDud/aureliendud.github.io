{"version":3,"sources":["webpack://aureliendud-website/./src/components/articlePreview.tsx","webpack://aureliendud-website/./src/partials/common/postsList.tsx","webpack://aureliendud-website/./src/services/tools.ts","webpack://aureliendud-website/./src/templates/template-categories.tsx"],"names":["CardCoverAttrs","className","alt","CardCover","image","skeletonMode","S","src","G","CardTitle","title","width","height","duration","CardText","excerpt","count","prettifyExcerpt","CardLink","link","href","cover","getImage","posts","map","post","index","key","length","timeToReadMessage","words","time","Math","round","timeToRead","replace","data","pageContext","allMdx","nodes","pageTitle","category"],"mappings":"kvDAUMA,EAAiB,CACrBC,UAAW,wCACXC,IAAK,IAqCDC,EAA0C,SAAC,GAA4B,IAA1BC,EAA0B,EAA1BA,MACjD,OAD2E,EAAnBC,aAE/C,gBAAC,EAAAC,EAAD,eAAaC,IAAI,qCAAwCP,EAAzD,wBAELI,EACK,gBAAC,EAAAI,EAAD,eAAaJ,MAAOA,GAAWJ,IAEjC,gBAAC,EAAAM,EAAD,eAAaC,IAAI,gCAAmCP,EAApD,yBAMHS,EAA0C,SAAC,GAA4B,IAA1BC,EAA0B,EAA1BA,MAAOL,EAAmB,EAAnBA,aACxD,OAAKK,GAAUL,EAGb,sBAAIJ,UAAU,kCACXI,EACC,gBAAC,KAAD,CAAUM,MAAM,MAAMC,OAAO,MAAMC,SA5DlB,IA8DjBH,GAP8B,kCAkBhCI,EAAwC,SAAC,GAA8B,IAA5BC,EAA4B,EAA5BA,QAASV,EAAmB,EAAnBA,aACxD,OAAKU,GAAYV,EAEbA,EACF,uBAAKJ,UAAU,wBACb,gBAAC,KAAD,CAAUe,MAAO,EAAGH,SA9ED,KAmFrB,uBAAKZ,UAAU,yBACZgB,QAAgBF,IAViB,kCAkBlCG,EAAwC,SAAC,GAA2B,IAAzBC,EAAyB,EAAzBA,KAAMd,EAAmB,EAAnBA,aACrD,OAAKc,GAASd,EAGZ,qBAAGe,KAAMD,EAAMlB,UAAU,kBACvB,wBAAMA,UAAU,WAAhB,mBAJ+B,kCA+BrC,EAjB0D,SAAC,GAAD,IACxDS,EADwD,EACxDA,MACAW,EAFwD,EAExDA,MACAN,EAHwD,EAGxDA,QACAI,EAJwD,EAIxDA,KACAd,EALwD,EAKxDA,aALwD,OAOxD,uBAAKJ,UAAU,cACb,gBAACE,EAAD,CAAWC,MAAOiB,IAASC,OAASD,GAAQhB,aAAcA,IAC1D,uBAAKJ,UAAU,aACb,gBAACQ,EAAD,CAAWC,MAAOA,EAAOL,aAAcA,IACvC,gBAACS,EAAD,CAAUC,QAASA,EAASV,aAAcA,KAE5C,gBAACa,EAAD,CAAUC,KAAMA,EAAMd,aAAcA,MC9FxC,EAzBgD,SAAC,GAAc,IAAZkB,EAAY,EAAZA,MAEjD,OACE,uBAAKtB,UAAU,OACZsB,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACT,uBAAKzB,UAAU,gCAAgC0B,IAAKD,GAClD,gBAAC,EAAmBD,OAIvBF,EAAMK,OAAS,GAZD,GAab,uBAAK3B,UAAU,mDACb,gBAAC,EAAD,CAAgBI,cAAY,KAI/BkB,EAAMK,OAAS,GAlBD,GAmBb,uBAAK3B,UAAU,mDACb,gBAAC,EAAD,CAAgBI,cAAY,Q,kCCf/B,SAASwB,EAAmBC,GACjC,IAAIC,EATC,SAAqBD,GAC1B,OAAOE,KAAKC,MAAMH,EAAQ,KAQfI,CAAWJ,GACtB,YAAYC,EAAO,GAAnB,KAAwBA,EAAO,EAAI,SAAW,W,yDASzC,IAAMd,EAAkB,SAACF,GAAD,OAA6BA,EAAeA,EAAQoB,QAAQ,kBAAmB,KAAOpB,EAA/C,K,2ECoDtE,UAzB8D,SAAC,GAA0B,MAAxBqB,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAE/Dd,GAAQa,SAAA,UAAAA,EAAME,cAAN,eAAcC,QAAS,KAG/BC,GAAYH,aAAA,EAAAA,EAAaI,WAAY,KAG3C,OACE,gBAAC,IAAD,KACE,uBAAKxC,UAAU,4BACZuC,GACC,sBAAIvC,UAAU,sBAAd,eACeuC,GAGhBjB,EAAMK,OAAS,GACd,gBAAC,IAAD,CAAWL,MAAOA","file":"component---src-templates-template-categories-tsx-38fb1a6a50196c50ab89.js","sourcesContent":["import React, { FunctionComponent } from \"react\"\nimport { StaticImage, GatsbyImage, getImage, IGatsbyImageData } from \"gatsby-plugin-image\"\nimport { prettifyExcerpt } from 'services/tools'\nimport Skeleton from \"react-loading-skeleton\"\n\n/**\n * Settings\n */\nconst skeletonDuration = 5\n\nconst CardCoverAttrs = {\n  className: \"card-img-top image-cover ratio-cinema\",\n  alt: \"\"\n}\n\n/**\n * Type\n */\ninterface IArticlePreview {\n  cover?: IGatsbyImageData,\n  title?: string,\n  excerpt?: string,\n  link?: string,\n  skeletonMode?: boolean,\n}\n\ninterface ICardCover{\n  image?: IGatsbyImageData, \n  skeletonMode?: boolean\n}\n\ninterface ICardTitle {\n  title?: string, \n  skeletonMode?: boolean\n}\n\ninterface ICardText {\n  excerpt?: string, \n  skeletonMode?: boolean\n}\n\ninterface ICardLink {\n  link?: string, \n  skeletonMode?: boolean\n}\n\n/**\n * Atoms card cover\n */\nconst CardCover:FunctionComponent<ICardCover> = ({ image, skeletonMode }) => {\n  if (skeletonMode) \n    return <StaticImage src=\"../assets/images/default_soon.png\" {...CardCoverAttrs} />\n  \n  if (image) \n    return <GatsbyImage image={image} {...CardCoverAttrs} />\n\n  return <StaticImage src=\"../assets/images/default.png\" {...CardCoverAttrs} />\n}\n\n/**\n * Atoms card title\n */\nconst CardTitle:FunctionComponent<ICardTitle> = ({ title, skeletonMode }) => {\n  if (!title && !skeletonMode) return <></>\n\n  return (\n    <h3 className=\"h6 font-weight-bold card-title\">\n      {skeletonMode ? (\n        <Skeleton width=\"8em\" height=\"1em\" duration={skeletonDuration} />\n      ) : (\n        title\n      )}\n    </h3>\n  )\n}\n\n/**\n * Atoms card text\n */\n\n\nconst CardText:FunctionComponent<ICardText> = ({ excerpt, skeletonMode }) => {\n  if (!excerpt && !skeletonMode) return <></>\n\n  if (skeletonMode) return (\n    <div className=\"text-small card-text\">\n      <Skeleton count={4} duration={skeletonDuration} />\n    </div>\n  ) \n\n  return (\n    <div className=\"text-small card-text\">\n      {prettifyExcerpt(excerpt)}\n    </div>\n  )\n}\n\n/**\n * Atoms card link\n */\nconst CardLink:FunctionComponent<ICardLink> = ({ link, skeletonMode }) => {\n  if (!link && !skeletonMode) return <></>\n\n  return (\n    <a href={link} className=\"stretched-link\">\n      <span className=\"sr-only\">\n        Lire l'article\n      </span>\n    </a>\n  )\n}\n\n/**\n * View\n */\nconst ArticlePreview:FunctionComponent<IArticlePreview> = ({ \n  title, \n  cover, \n  excerpt, \n  link, \n  skeletonMode \n}) => (\n  <div className=\"card h-100\">\n    <CardCover image={cover && getImage(cover)} skeletonMode={skeletonMode} />\n    <div className=\"card-body\">\n      <CardTitle title={title} skeletonMode={skeletonMode} />\n      <CardText excerpt={excerpt} skeletonMode={skeletonMode} />\n    </div>\n    <CardLink link={link} skeletonMode={skeletonMode} />\n  </div>\n)\n\nexport default ArticlePreview\n","import React, { FunctionComponent } from \"react\";\nimport ArticlePreview from \"components/articlePreview\";\n\ninterface IPostsList {\n  posts: IPost[]\n}\n\nconst minPostCount = 3\n\nconst PostsList:FunctionComponent<IPostsList> = ({ posts }) => {\n\n  return (\n    <div className=\"row\">\n      {posts.map((post, index) => (\n        <div className=\"col-12 col-md-6 col-lg-4 pb-4\" key={index}>\n          <ArticlePreview {...post} />\n        </div>\n      ))}\n      \n      {posts.length + 1 <= minPostCount && (\n        <div className=\"col-12 col-md-6 col-lg-4 pb-4 d-none d-md-block\">\n          <ArticlePreview skeletonMode />\n        </div>\n      )}\n      \n      {posts.length + 2 <= minPostCount && (\n        <div className=\"col-12 col-md-6 col-lg-4 pb-4 d-none d-lg-block\">\n          <ArticlePreview skeletonMode />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default PostsList\n","/**\n * Time to read a text\n * @description 230 words is an average count \n */\nexport function timeToRead (words:number) {\n  return Math.round(words / 200)\n}\n\n/**\n * Time to read a text\n * Rectify to display an user-friendly result\n */\nexport function timeToReadMessage (words:number) {\n  let time = timeToRead(words)\n  return `~ ${time + 1} ${time < 1 ? \"minute\" : \"minutes\"}`\n}\n\n/**\n * @description\n * Trim until the last point is it exists\n * Else the full excerpt if it exists\n * Else an empty string\n */\nexport const prettifyExcerpt = (excerpt?:string):string => !excerpt ? '' : excerpt.replace(/(?!.*\\.)\\n+.*/gm, '') || excerpt ","import React, { FunctionComponent } from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"partials/layouts/layout-page\";\nimport PostsList from \"partials/common/postsList\";\n\n/**\n * Type\n */\ninterface ICategoryTemplate {\n  data: IAllMdxData,\n  pageContext: any\n}\n\n/**\n * QUery\n */\nexport const pageQuery = graphql`\n  query categoryPageQuery($category: String!) {\n    allMdx(\n      sort: { fields: [frontmatter___date], order: ASC }\n      filter: {\n        frontmatter: { category: { eq: $category } }\n        fields: { group: { eq: \"blog\" } }\n      }\n    ) {\n      nodes {\n        frontmatter {\n          title\n          date\n          category\n          cover {\n            childImageSharp {\n              gatsbyImageData(layout: FULL_WIDTH)\n            }\n          }\n        }\n        fields {\n          slug\n          group\n        }\n        excerpt(pruneLength: 150)\n      }\n    }\n  }\n`;\n\n\n/**\n * View\n */\nconst CategoryTemplate:FunctionComponent<ICategoryTemplate> = ({ data, pageContext }) => {\n  // format mdx data\n  const posts = data?.allMdx?.nodes || null;\n\n  // title\n  const pageTitle = pageContext?.category || null;\n\n  // render\n  return (\n    <Layout>\n      <div className=\"container pt-2 mt-4 mb-3\">\n        {pageTitle && (\n          <h1 className=\"mb-4 effect-square\">\n            Cat√©gorie : {pageTitle}\n          </h1>\n        )}\n        {posts.length > 0 && (\n          <PostsList posts={posts} />\n        )}\n      </div>\n    </Layout>\n  );\n}\n\n\nexport default CategoryTemplate"],"sourceRoot":""}