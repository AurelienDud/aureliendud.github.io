{"version":3,"sources":["webpack://aureliendud-website/./src/components/articlePreview.tsx","webpack://aureliendud-website/./src/partials/common/postsList.tsx","webpack://aureliendud-website/./src/services/tools.ts","webpack://aureliendud-website/./src/templates/template-categories.tsx"],"names":["CardCoverAttrs","className","alt","CardCover","image","skeletonMode","S","src","G","CardTitle","title","width","height","duration","CardText","excerpt","count","prettifyExcerpt","CardLink","link","href","cover","getImage","posts","map","post","index","key","length","timeToReadMessage","words","time","Math","round","timeToRead","replace","data","pageContext","allMdx","nodes","pageTitle","category"],"mappings":"kvDAUMA,EAAiB,CACrBC,UAAW,wCACXC,IAAK,IAqCDC,EAA0C,SAAC,GAA4B,IAA1BC,EAA0B,EAA1BA,MACjD,OAD2E,EAAnBC,aAE/C,gBAAC,EAAAC,EAAD,eAAaC,IAAI,qCAAwCP,EAAzD,wBAELI,EACK,gBAAC,EAAAI,EAAD,eAAaJ,MAAOA,GAAWJ,IAEjC,gBAAC,EAAAM,EAAD,eAAaC,IAAI,gCAAmCP,EAApD,yBAMHS,EAA0C,SAAC,GAA4B,IAA1BC,EAA0B,EAA1BA,MAAOL,EAAmB,EAAnBA,aACxD,OAAKK,GAAUL,EAGb,sBAAIJ,UAAU,kCACXI,EACC,gBAAC,KAAD,CAAUM,MAAM,MAAMC,OAAO,MAAMC,SA5DlB,IA8DjBH,GAP8B,kCAkBhCI,EAAwC,SAAC,GAA8B,IAA5BC,EAA4B,EAA5BA,QAASV,EAAmB,EAAnBA,aACxD,OAAKU,GAAYV,EAEbA,EACF,uBAAKJ,UAAU,wBACb,gBAAC,KAAD,CAAUe,MAAO,EAAGH,SA9ED,KAmFrB,uBAAKZ,UAAU,yBACZgB,QAAgBF,IAViB,kCAkBlCG,EAAwC,SAAC,GAA2B,IAAzBC,EAAyB,EAAzBA,KAAMd,EAAmB,EAAnBA,aACrD,OAAKc,GAASd,EAGZ,qBAAGe,KAAMD,EAAMlB,UAAU,kBACvB,wBAAMA,UAAU,WAAhB,mBAJ+B,kCA+BrC,EAjB0D,SAAC,GAAD,IACxDS,EADwD,EACxDA,MACAW,EAFwD,EAExDA,MACAN,EAHwD,EAGxDA,QACAI,EAJwD,EAIxDA,KACAd,EALwD,EAKxDA,aALwD,OAOxD,uBAAKJ,UAAU,cACb,gBAACE,EAAD,CAAWC,MAAOiB,IAASC,OAASD,GAAQhB,aAAcA,IAC1D,uBAAKJ,UAAU,aACb,gBAACQ,EAAD,CAAWC,MAAOA,EAAOL,aAAcA,IACvC,gBAACS,EAAD,CAAUC,QAASA,EAASV,aAAcA,KAE5C,gBAACa,EAAD,CAAUC,KAAMA,EAAMd,aAAcA,MC9FxC,EAzBgD,SAAC,GAAc,IAAZkB,EAAY,EAAZA,MAEjD,OACE,uBAAKtB,UAAU,OACZsB,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACT,uBAAKzB,UAAU,gCAAgC0B,IAAKD,GAClD,gBAAC,EAAmBD,OAIvBF,EAAMK,OAAS,GAZD,GAab,uBAAK3B,UAAU,mDACb,gBAAC,EAAD,CAAgBI,cAAY,KAI/BkB,EAAMK,OAAS,GAlBD,GAmBb,uBAAK3B,UAAU,mDACb,gBAAC,EAAD,CAAgBI,cAAY,Q,kCCf/B,SAASwB,EAAmBC,GACjC,IAAIC,EATC,SAAqBD,GAC1B,OAAOE,KAAKC,MAAMH,EAAQ,KAQfI,CAAWJ,GACtB,YAAYC,EAAO,GAAnB,KAAwBA,EAAO,EAAI,SAAW,W,yDASzC,IAAMd,EAAkB,SAACF,GAAD,OAA6BA,EAAeA,EAAQoB,QAAQ,kBAAmB,KAAOpB,EAA/C,K,2ECoDtE,UAzB8D,SAAC,GAA0B,MAAxBqB,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAE/Dd,GAAQa,SAAA,UAAAA,EAAME,cAAN,eAAcC,QAAS,KAG/BC,GAAYH,aAAA,EAAAA,EAAaI,WAAY,KAG3C,OACE,gBAAC,IAAD,KACE,uBAAKxC,UAAU,4BACZuC,GACC,sBAAIvC,UAAU,sBAAd,eACeuC,GAGhBjB,EAAMK,OAAS,GACd,gBAAC,IAAD,CAAWL,MAAOA","file":"component---src-templates-template-categories-tsx-38fb1a6a50196c50ab89.js","sourcesContent":["import React, { FunctionComponent } from \"react\"\r\nimport { StaticImage, GatsbyImage, getImage, IGatsbyImageData } from \"gatsby-plugin-image\"\r\nimport { prettifyExcerpt } from 'services/tools'\r\nimport Skeleton from \"react-loading-skeleton\"\r\n\r\n/**\r\n * Settings\r\n */\r\nconst skeletonDuration = 5\r\n\r\nconst CardCoverAttrs = {\r\n  className: \"card-img-top image-cover ratio-cinema\",\r\n  alt: \"\"\r\n}\r\n\r\n/**\r\n * Type\r\n */\r\ninterface IArticlePreview {\r\n  cover?: IGatsbyImageData,\r\n  title?: string,\r\n  excerpt?: string,\r\n  link?: string,\r\n  skeletonMode?: boolean,\r\n}\r\n\r\ninterface ICardCover{\r\n  image?: IGatsbyImageData, \r\n  skeletonMode?: boolean\r\n}\r\n\r\ninterface ICardTitle {\r\n  title?: string, \r\n  skeletonMode?: boolean\r\n}\r\n\r\ninterface ICardText {\r\n  excerpt?: string, \r\n  skeletonMode?: boolean\r\n}\r\n\r\ninterface ICardLink {\r\n  link?: string, \r\n  skeletonMode?: boolean\r\n}\r\n\r\n/**\r\n * Atoms card cover\r\n */\r\nconst CardCover:FunctionComponent<ICardCover> = ({ image, skeletonMode }) => {\r\n  if (skeletonMode) \r\n    return <StaticImage src=\"../assets/images/default_soon.png\" {...CardCoverAttrs} />\r\n  \r\n  if (image) \r\n    return <GatsbyImage image={image} {...CardCoverAttrs} />\r\n\r\n  return <StaticImage src=\"../assets/images/default.png\" {...CardCoverAttrs} />\r\n}\r\n\r\n/**\r\n * Atoms card title\r\n */\r\nconst CardTitle:FunctionComponent<ICardTitle> = ({ title, skeletonMode }) => {\r\n  if (!title && !skeletonMode) return <></>\r\n\r\n  return (\r\n    <h3 className=\"h6 font-weight-bold card-title\">\r\n      {skeletonMode ? (\r\n        <Skeleton width=\"8em\" height=\"1em\" duration={skeletonDuration} />\r\n      ) : (\r\n        title\r\n      )}\r\n    </h3>\r\n  )\r\n}\r\n\r\n/**\r\n * Atoms card text\r\n */\r\n\r\n\r\nconst CardText:FunctionComponent<ICardText> = ({ excerpt, skeletonMode }) => {\r\n  if (!excerpt && !skeletonMode) return <></>\r\n\r\n  if (skeletonMode) return (\r\n    <div className=\"text-small card-text\">\r\n      <Skeleton count={4} duration={skeletonDuration} />\r\n    </div>\r\n  ) \r\n\r\n  return (\r\n    <div className=\"text-small card-text\">\r\n      {prettifyExcerpt(excerpt)}\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * Atoms card link\r\n */\r\nconst CardLink:FunctionComponent<ICardLink> = ({ link, skeletonMode }) => {\r\n  if (!link && !skeletonMode) return <></>\r\n\r\n  return (\r\n    <a href={link} className=\"stretched-link\">\r\n      <span className=\"sr-only\">\r\n        Lire l'article\r\n      </span>\r\n    </a>\r\n  )\r\n}\r\n\r\n/**\r\n * View\r\n */\r\nconst ArticlePreview:FunctionComponent<IArticlePreview> = ({ \r\n  title, \r\n  cover, \r\n  excerpt, \r\n  link, \r\n  skeletonMode \r\n}) => (\r\n  <div className=\"card h-100\">\r\n    <CardCover image={cover && getImage(cover)} skeletonMode={skeletonMode} />\r\n    <div className=\"card-body\">\r\n      <CardTitle title={title} skeletonMode={skeletonMode} />\r\n      <CardText excerpt={excerpt} skeletonMode={skeletonMode} />\r\n    </div>\r\n    <CardLink link={link} skeletonMode={skeletonMode} />\r\n  </div>\r\n)\r\n\r\nexport default ArticlePreview\r\n","import React, { FunctionComponent } from \"react\";\r\nimport ArticlePreview from \"components/articlePreview\";\r\n\r\ninterface IPostsList {\r\n  posts: IPost[]\r\n}\r\n\r\nconst minPostCount = 3\r\n\r\nconst PostsList:FunctionComponent<IPostsList> = ({ posts }) => {\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {posts.map((post, index) => (\r\n        <div className=\"col-12 col-md-6 col-lg-4 pb-4\" key={index}>\r\n          <ArticlePreview {...post} />\r\n        </div>\r\n      ))}\r\n      \r\n      {posts.length + 1 <= minPostCount && (\r\n        <div className=\"col-12 col-md-6 col-lg-4 pb-4 d-none d-md-block\">\r\n          <ArticlePreview skeletonMode />\r\n        </div>\r\n      )}\r\n      \r\n      {posts.length + 2 <= minPostCount && (\r\n        <div className=\"col-12 col-md-6 col-lg-4 pb-4 d-none d-lg-block\">\r\n          <ArticlePreview skeletonMode />\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostsList\r\n","/**\r\n * Time to read a text\r\n * @description 230 words is an average count \r\n */\r\nexport function timeToRead (words:number) {\r\n  return Math.round(words / 200)\r\n}\r\n\r\n/**\r\n * Time to read a text\r\n * Rectify to display an user-friendly result\r\n */\r\nexport function timeToReadMessage (words:number) {\r\n  let time = timeToRead(words)\r\n  return `~ ${time + 1} ${time < 1 ? \"minute\" : \"minutes\"}`\r\n}\r\n\r\n/**\r\n * @description\r\n * Trim until the last point is it exists\r\n * Else the full excerpt if it exists\r\n * Else an empty string\r\n */\r\nexport const prettifyExcerpt = (excerpt?:string):string => !excerpt ? '' : excerpt.replace(/(?!.*\\.)\\n+.*/gm, '') || excerpt ","import React, { FunctionComponent } from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"partials/layouts/layout-page\";\r\nimport PostsList from \"partials/common/postsList\";\r\n\r\n/**\r\n * Type\r\n */\r\ninterface ICategoryTemplate {\r\n  data: IAllMdxData,\r\n  pageContext: any\r\n}\r\n\r\n/**\r\n * QUery\r\n */\r\nexport const pageQuery = graphql`\r\n  query categoryPageQuery($category: String!) {\r\n    allMdx(\r\n      sort: { fields: [frontmatter___date], order: ASC }\r\n      filter: {\r\n        frontmatter: { category: { eq: $category } }\r\n        fields: { group: { eq: \"blog\" } }\r\n      }\r\n    ) {\r\n      nodes {\r\n        frontmatter {\r\n          title\r\n          date\r\n          category\r\n          cover {\r\n            childImageSharp {\r\n              gatsbyImageData(layout: FULL_WIDTH)\r\n            }\r\n          }\r\n        }\r\n        fields {\r\n          slug\r\n          group\r\n        }\r\n        excerpt(pruneLength: 150)\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n/**\r\n * View\r\n */\r\nconst CategoryTemplate:FunctionComponent<ICategoryTemplate> = ({ data, pageContext }) => {\r\n  // format mdx data\r\n  const posts = data?.allMdx?.nodes || null;\r\n\r\n  // title\r\n  const pageTitle = pageContext?.category || null;\r\n\r\n  // render\r\n  return (\r\n    <Layout>\r\n      <div className=\"container pt-2 mt-4 mb-3\">\r\n        {pageTitle && (\r\n          <h1 className=\"mb-4 effect-square\">\r\n            Cat√©gorie : {pageTitle}\r\n          </h1>\r\n        )}\r\n        {posts.length > 0 && (\r\n          <PostsList posts={posts} />\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n\r\n\r\nexport default CategoryTemplate"],"sourceRoot":""}