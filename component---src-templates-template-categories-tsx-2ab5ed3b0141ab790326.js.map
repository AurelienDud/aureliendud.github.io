{"version":3,"sources":["webpack://aureliendud-website/./src/services/tools.ts","webpack://aureliendud-website/./src/components/articlePreview.tsx","webpack://aureliendud-website/./src/partials/common/postsList.tsx","webpack://aureliendud-website/./src/templates/template-categories.tsx"],"names":["timeToReadMessage","words","time","Math","round","timeToRead","CardCoverAttrs","className","alt","CardCover","image","skeletonMode","S","src","G","title","cover","excerpt","link","date","category","getImage","href","posts","map","post","key","id","data","pageContext","allMdx","nodes","pageTitle","length"],"mappings":"8tDAYO,SAASA,EAAmBC,GACjC,IAAIC,EATC,SAAqBD,GAC1B,OAAOE,KAAKC,MAAMH,EAAQ,KAQfI,CAAWJ,GACtB,YAAYC,EAAO,GAAnB,KAAwBA,EAAO,EAAI,SAAW,WASzC,ICZDI,EAAiB,CACrBC,UAAW,0BACXC,IAAK,IA6BDC,EAA0C,SAAC,GAA4B,IAA1BC,EAA0B,EAA1BA,MACjD,OAD2E,EAAnBC,aAE/C,gBAAC,EAAAC,EAAD,eAAaC,IAAI,qCAAwCP,EAAzD,wBAELI,EACK,gBAAC,EAAAI,EAAD,eAAaJ,MAAOA,GAAWJ,IAEjC,gBAAC,EAAAM,EAAD,eAAaC,IAAI,gCAAmCP,EAApD,yBAkGT,EA3CgD,SAAC,GAAD,IAC9CS,EAD8C,EAC9CA,MACAC,EAF8C,EAE9CA,MACAC,EAH8C,EAG9CA,QACAC,EAJ8C,EAI9CA,KACAC,EAL8C,EAK9CA,KACAC,EAN8C,EAM9CA,SACAnB,EAP8C,EAO9CA,MAP8C,OAS9C,uBAAKM,UAAU,qCACb,uBAAKA,UAAU,qCACb,uBAAKA,UAAU,mBACb,gBAACE,EAAD,CAAWC,MAAOM,IAASK,OAASL,MAEtC,uBAAKT,UAAU,4BACb,sBAAIA,UAAU,yDACXa,GAEH,sBAAIb,UAAU,WACXQ,GAEH,yBACGE,GAEH,qBAAGV,UAAU,SACX,4BACGP,EAAkBC,IAErB,wBAAMM,UAAU,QAAhB,KACA,yCACaY,MAKnB,qBAAGG,KAAMJ,EAAMX,UAAU,kBACvB,wBAAMA,UAAU,WAAhB,qBCxHN,EAVgD,SAAC,GAAD,IAAGgB,EAAH,EAAGA,MAAH,OAC9C,gCACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,uBAAKlB,UAAU,OAAOmB,IAAKD,EAAKE,IAC9B,gBAAC,EAAmBF,U,2EC6D5B,UAzB8D,SAAC,GAA0B,MAAxBG,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAE/DN,GAAQK,SAAA,UAAAA,EAAME,cAAN,eAAcC,QAAS,KAG/BC,GAAYH,aAAA,EAAAA,EAAaT,WAAY,KAG3C,OACE,gBAAC,IAAD,KACE,uBAAKb,UAAU,4BACZyB,GACC,sBAAIzB,UAAU,sBAAd,eACeyB,GAGhBT,EAAMU,OAAS,GACd,gBAAC,IAAD,CAAWV,MAAOA","file":"component---src-templates-template-categories-tsx-2ab5ed3b0141ab790326.js","sourcesContent":["/**\n * Time to read a text\n * @description 230 words is an average count \n */\nexport function timeToRead (words:number) {\n  return Math.round(words / 200)\n}\n\n/**\n * Time to read a text\n * Rectify to display an user-friendly result\n */\nexport function timeToReadMessage (words:number) {\n  let time = timeToRead(words)\n  return `~ ${time + 1} ${time < 1 ? \"minute\" : \"minutes\"}`\n}\n\n/**\n * @description\n * Trim until the last point is it exists\n * Else the full excerpt if it exists\n * Else an empty string\n */\nexport const prettifyExcerpt = (excerpt?:string):string => !excerpt ? '' : excerpt.replace(/(?!.*\\.)\\n+.*/gm, '') || excerpt ","import React, { FunctionComponent } from \"react\"\nimport { StaticImage, GatsbyImage, getImage, IGatsbyImageData } from \"gatsby-plugin-image\"\nimport { prettifyExcerpt } from 'services/tools'\nimport Skeleton from \"react-loading-skeleton\"\nimport { timeToReadMessage } from \"services/tools\"\n\n/**\n * Settings\n */\nconst skeletonDuration = 5\n\nconst CardCoverAttrs = {\n  className: \"h-100 w-100 image-cover\",\n  alt: \"\"\n}\n\n/**\n * Type\n */\ninterface ICardCover{\n  image?: IGatsbyImageData, \n  skeletonMode?: boolean\n}\n\ninterface ICardTitle {\n  title?: string, \n  skeletonMode?: boolean\n}\n\ninterface ICardText {\n  excerpt?: string, \n  skeletonMode?: boolean\n}\n\ninterface ICardLink {\n  link?: string, \n  skeletonMode?: boolean\n}\n\n/**\n * Atoms card cover\n */\nconst CardCover:FunctionComponent<ICardCover> = ({ image, skeletonMode }) => {\n  if (skeletonMode) \n    return <StaticImage src=\"../assets/images/default_soon.png\" {...CardCoverAttrs} />\n  \n  if (image) \n    return <GatsbyImage image={image} {...CardCoverAttrs} />\n\n  return <StaticImage src=\"../assets/images/default.png\" {...CardCoverAttrs} />\n}\n\n/**\n * Atoms card title\n */\nconst CardTitle:FunctionComponent<ICardTitle> = ({ title, skeletonMode }) => {\n  if (!title && !skeletonMode) return <></>\n\n  return (\n    <h3 className=\"h4 mb-2\">\n      {skeletonMode ? (\n        <Skeleton width=\"12em\" height=\"1em\" duration={skeletonDuration} />\n      ) : (\n        title\n      )}\n    </h3>\n  )\n}\n\n/**\n * Atoms card text\n */\nconst CardText:FunctionComponent<ICardText> = ({ excerpt, skeletonMode }) => {\n  if (!excerpt && !skeletonMode) return <></>\n\n  if (skeletonMode) return (\n    <div className=\"text-small\">\n      <Skeleton count={3} duration={skeletonDuration} />\n    </div>\n  ) \n\n  return (\n    <div className=\"text-small\">\n      {prettifyExcerpt(excerpt)}\n    </div>\n  )\n}\n\n/**\n * Atoms card link\n */\nconst CardLink:FunctionComponent<ICardLink> = ({ link, skeletonMode }) => {\n  if (!link || skeletonMode) return <></>\n\n  return (\n    <a href={link} className=\"stretched-link d-inline-block mt-2 mb-0\">\n      Lire l'article\n    </a>\n  )\n}\n\n/**\n * View\n */\nconst ArticlePreview:FunctionComponent<IPost> = ({ \n  title, \n  cover, \n  excerpt, \n  link, \n  date,\n  category,\n  words\n}) => (\n  <div className=\"position-relative overflow-hidden\">\n    <div className=\"row no-gutters pb-3 border-bottom\">\n      <div className=\"col-12 col-md-4\">\n        <CardCover image={cover && getImage(cover)} />\n      </div>\n      <div className=\"col pt-3 pt-md-0 pl-md-3\">\n        <h3 className=\"small m-0 font-weight-light text-muted text-uppercase\">\n          {category}\n        </h3>\n        <h2 className=\"h4 my-1\">\n          {title}\n        </h2>\n        <p> \n          {excerpt}\n        </p>\n        <p className=\"small\">\n          <span>\n            {timeToReadMessage(words)}\n          </span>\n          <span className=\"mx-2\">•</span>\n          <span>\n            publié le {date}\n          </span>\n        </p>\n      </div>\n    </div>\n    <a href={link} className=\"stretched-link\">\n      <span className=\"sr-only\">\n        Lire l'article\n      </span>\n    </a>\n  </div>\n)\n\nexport default ArticlePreview","import React, { FunctionComponent } from \"react\";\nimport ArticlePreview from \"components/articlePreview\";\n\ninterface IPostsList {\n  posts: IPost[]\n}\n\n/**\n * Posts\n */\nconst PostsList:FunctionComponent<IPostsList> = ({ posts }) => (\n  <>\n    {posts.map(post => (\n      <div className=\"mb-4\" key={post.id}>\n        <ArticlePreview {...post} />\n      </div>\n    ))}\n  </>\n)\n\nexport default PostsList\n","import React, { FunctionComponent } from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"partials/layouts/layout-page\";\nimport PostsList from \"partials/common/postsList\";\n\n/**\n * Type\n */\ninterface ICategoryTemplate {\n  data: IAllMdxData,\n  pageContext: any\n}\n\n/**\n * QUery\n */\nexport const pageQuery = graphql`\n  query categoryPageQuery($category: String!) {\n    allMdx(\n      sort: { fields: [frontmatter___date], order: ASC }\n      filter: {\n        frontmatter: { category: { eq: $category } }\n        fields: { group: { eq: \"blog\" } }\n      }\n    ) {\n      nodes {\n        frontmatter {\n          title\n          date\n          category\n          cover {\n            childImageSharp {\n              gatsbyImageData(layout: FULL_WIDTH)\n            }\n          }\n        }\n        fields {\n          slug\n          group\n        }\n        excerpt(pruneLength: 150)\n      }\n    }\n  }\n`;\n\n\n/**\n * View\n */\nconst CategoryTemplate:FunctionComponent<ICategoryTemplate> = ({ data, pageContext }) => {\n  // format mdx data\n  const posts = data?.allMdx?.nodes || null;\n\n  // title\n  const pageTitle = pageContext?.category || null;\n\n  // render\n  return (\n    <Layout>\n      <div className=\"container pt-2 mt-4 mb-3\">\n        {pageTitle && (\n          <h1 className=\"mb-4 effect-square\">\n            Catégorie : {pageTitle}\n          </h1>\n        )}\n        {posts.length > 0 && (\n          <PostsList posts={posts} />\n        )}\n      </div>\n    </Layout>\n  );\n}\n\n\nexport default CategoryTemplate"],"sourceRoot":""}