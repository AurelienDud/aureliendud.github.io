{"version":3,"sources":["webpack://aureliendud-website/./src/services/formaters.ts","webpack://aureliendud-website/./src/services/tools.ts","webpack://aureliendud-website/./src/partials/blog/comments.tsx","webpack://aureliendud-website/./src/partials/blog/cover.tsx","webpack://aureliendud-website/./src/templates/template-blog.tsx"],"names":["formatPost","data","title","frontmatter","undefined","date","category","cover","childImageSharp","excerpt","link","fields","slug","body","words","wordCount","timeToReadMessage","time","Math","round","timeToRead","comments","useRef","useState","isReady","setIsReady","useEffect","current","scriptTag","document","createElement","async","src","setAttribute","appendChild","className","ref","coverStyle","css","coverImgStyles","coverImage","coverEl","parallax","scroll","mov","elBound","handleScroll","event","preventDefault","window","scrollY","height","max","opacity","sign","style","transform","toString","getBoundingClientRect","addEventListener","removeEventListener","overflow","cx","G","image","alt","model","mdx","getImage","meta","type","MDXProvider","components","mdxComponents","MDXRenderer"],"mappings":"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","file":"component---src-templates-template-blog-tsx-79b97d4f737d29357256.js","sourcesContent":["/**\n * Format data from graphQL into a friendly flat object\n * @param {object} data from graphQL\n */\nexport const formatPost = ( data:INode ):IPost => ({\n  title: data?.frontmatter?.title || undefined,\n  date: data?.frontmatter?.date || undefined,\n  category: data?.frontmatter?.category || undefined,\n  cover: data?.frontmatter?.cover?.childImageSharp || undefined,\n  excerpt: data?.excerpt || undefined,\n  link: data?.fields?.slug || undefined,\n  body: data?.body || undefined,\n  words: data?.wordCount?.words || undefined\n})\n\n","/**\n * Time to read a text\n * @description 230 words is an average count \n */\nexport function timeToRead (words:number) {\n  return Math.round(words / 230)\n}\n\n/**\n * Time to read a text\n * Rectify to display an user-friendly result\n */\nexport function timeToReadMessage (words:number) {\n  let time = timeToRead(words)\n  return `< ${time + 1} ${time < 1 ? \"minute\" : \"minutes\"}`\n}","import React, { FunctionComponent, useState, useRef, useEffect } from 'react'\n\n/**\n * Settings\n */\nconst pluginApi = 'https://utteranc.es/client.js'\nconst websiteRepo = 'AurelienDud/AurelienDud.github.io'\nconst githubLabel = 'comments'\nconst githubTitle = 'pathname'\nconst commentsTheme = 'boxy-light'\n\n/**\n * Override Utterances styles\n * this is ugly but the plugin seems not provide a way to customize its container styles\n * and set an arbitrary max-width\n */\nconst forceStyles = `\n  .utterances {\n    max-width: 100% !important;\n  }\n`\n\n/**\n * Comments component\n */\nconst Comments:FunctionComponent = () => {\n  const comments = useRef<HTMLDivElement>(null)\n  const [isReady, setIsReady] = useState(false)\n\n  useEffect(() => {\n    if (comments?.current && !isReady) {\n      const scriptTag = document.createElement('script')\n      scriptTag.async = true\n      scriptTag.src = pluginApi\n      scriptTag.setAttribute('repo', websiteRepo)\n      scriptTag.setAttribute('issue-term', githubTitle)\n      scriptTag.setAttribute('theme', commentsTheme)\n      scriptTag.setAttribute('label', githubLabel)\n      scriptTag.setAttribute('async', 'true')\n      scriptTag.setAttribute('crossorigin', 'anonymous')\n      scriptTag.setAttribute('reverse-order', 'true')\n      scriptTag.setAttribute('input-position-top', 'true')\n\n      comments.current.appendChild(scriptTag)\n      setIsReady(true)\n    }\n  }, [comments])\n\n  return (\n    <>\n      <style>{forceStyles}</style>\n      <div className='w-100' ref={comments} />\n    </>\n  )\n}\n\nexport default Comments\n","import React, { FunctionComponent, useRef, useEffect } from \"react\"\nimport { css, cx } from '@emotion/css'\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\"\n\n/**\n * Type\n */\ninterface IBlogCover {\n  coverImage: IGatsbyImageData\n}\n\ninterface IParallax {\n  scroll: number,\n  mov: number,\n  elBound: DOMRect|null,\n}\n\n/**\n * Settings\n */\nconst parallaxStrength:number = 1.25\n\n\n/**\n * Styles\n */\nconst coverStyle = css`\n  position: relative;\n  overflow: hidden;\n  box-shadow: 0px -40px 40px -40px inset #00000030;\n  &:after {\n    content: \"\";\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    border-top: solid 2vw transparent;\n    border-bottom: solid 2vw white;\n    border-left: solid 50vw white;\n    border-right: solid 50vw white;\n  }\n`\n\nconst coverImgStyles = css`\n  position: relative;\n  border-radius: 5px;\n  border-top: solid 6px white;\n  border-right: solid 6px white;\n  border-left: solid 6px white;\n  transform-origin: center;\n  transform: translate3d(0, 0, 0);\n  -webkit-transform-style: preserve-3d;\n  -webkit-backface-visibility: hidden;\n  transition: all 0s 0s;\n  background-color: #ffffff30;\n  opacity: 1;\n  transition: opacity linear 0.4s;\n  box-shadow: rgb(0 0 0 / 33%) 0px -45px 20px -20px inset;\n`\n\n/**\n * View\n */\nconst BlogCover:FunctionComponent<IBlogCover> = ({ coverImage }) => {\n  // set a ref on the cover container to create the visual effect\n  const coverEl = useRef<HTMLDivElement>(null)\n\n  // set a ref to manage the parallax effect\n  const parallax = useRef<IParallax>({\n    scroll: 0,\n    mov: 0,\n    elBound: null,\n  })\n\n  // handle event\n  const handleScroll = (event:Event) => {\n    event.preventDefault()\n\n    if ( \n      !coverImage \n      || !coverEl.current \n      || !parallax.current.elBound\n      || window.scrollY > parallax.current.elBound.height\n    ) return\n    \n    // get scroll\n    const scroll = Math.max(0, Math.round(window.scrollY * parallaxStrength))\n\n    // get scroll distance \n    const mov = Math.round(scroll - parallax.current.scroll)\n\n    // calcul opacity\n    const opacity = 1 - (1 / parallax.current.elBound.height) * scroll * parallaxStrength\n\n    // apply conditional style\n    if ( \n      Math.sign(mov) === Math.sign(parallax.current.mov) \n      || parallax.current.scroll === 0 \n    ){\n      coverEl.current.style.transform = `translate3d(0, ${scroll}px, 0)`\n      coverEl.current.style.opacity = opacity.toString()\n    }\n\n    // apply new values\n    parallax.current.scroll = scroll\n    parallax.current.mov = mov\n  }\n\n  // init parallax\n  useEffect(() => {\n    if ( parallax.current.elBound || !coverEl.current ) return  \n    \n    parallax.current.elBound = coverEl.current.getBoundingClientRect()\n  }, [coverEl])\n\n  // manage parallax effect\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll)\n    \n    return () => window.removeEventListener(\"scroll\", handleScroll)\n  }, [])\n\n  return (\n    <div style={{ overflow: \"hidden\" }}>\n      <div className={cx(coverStyle, \"bg-primary\")}>\n        <div className=\"container-reading\">\n          <div className={coverImgStyles} ref={coverEl}>\n            <GatsbyImage image={coverImage} alt=\"\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\nexport default BlogCover\n\n","import React, { FunctionComponent } from \"react\"\nimport { graphql } from \"gatsby\"\nimport { getImage } from \"gatsby-plugin-image\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\nimport mdxComponents from \"services/mdxConvertor\"\nimport { formatPost } from \"services/formaters\"\nimport { timeToReadMessage } from \"services/tools\"\nimport Layout from \"partials/layouts/layout-page\"\nimport Comments from \"partials/blog/comments\"\nimport Cover from \"partials/blog/cover\"\n\n/**\n * Types\n */\ninterface IBlogTemplate {\n  data: any\n}\n\n/**\n * QUery\n */\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      id\n      body\n      wordCount {\n        words\n      }\n      frontmatter {\n        title\n        category\n        date\n        cover {\n          childImageSharp {\n            gatsbyImageData(layout: FULL_WIDTH)\n          }\n        }\n      }\n    }\n  }\n`\n\n\n/**\n * View\n */\nconst BlogTemplate:FunctionComponent<IBlogTemplate> = ({ data }) => {\n  // format mdx data\n  const model = formatPost(data.mdx)\n\n  // cover image\n  const coverImage = model.cover && getImage(model.cover)\n\n  // metadata\n  const meta = {\n    type: \"article\",\n    category: model.category,\n  }\n\n  return (\n    <Layout meta={meta}>\n      {/* cover */}\n      {coverImage && (\n        <Cover coverImage={coverImage} />\n      )}\n\n      {/* content */}\n      <div className=\"container mt-2 mb-2\">\n        {/* title */}\n        {model.title && (\n          <h1 className=\"h1 h-reading mb-3 text-center\">\n            {model.title}\n          </h1>\n        )}\n\n        {/* date & duration */}\n        <div className=\"container-reading mt-3\">\n          {(model.date || model.words) && (\n            <div className=\"py-1 my-4 border-top border-bottom text-muted small\">\n              <div className=\"row no-gutters\">\n                {model.date && (\n                  <div className=\"col-12 col-sm px-1\">\n                    publié le {model.date}\n                  </div>\n                )}\n                {model.words && (\n                  <div className=\"col-12 col-sm px-1 text-right\">\n                    {timeToReadMessage(40)}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* body */}\n          {model.body && (\n            <MDXProvider components={mdxComponents}>\n              <MDXRenderer>{model.body}</MDXRenderer>\n            </MDXProvider>\n          )}\n\n          {/* comments */}\n          <div className=\"mt-4 p-1 border rounded shadow-sm\">\n            <Comments />\n          </div>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\n\nexport default BlogTemplate"],"sourceRoot":""}